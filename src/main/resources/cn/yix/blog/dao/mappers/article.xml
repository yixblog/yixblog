<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.yix.blog.dao.mappers.ArticleMapper">
    <resultMap id="article" type="Article">
        <id column="id" property="id"/>
        <result column="title" property="title"/>
        <result column="content" property="content"/>
        <result column="addtime" property="addTime"/>
        <result column="edittime" property="editTime"/>
        <result column="topflag" property="topFlag"/>
        <result column="replycount" property="replyCount"/>
        <association property="author" column="author"
                     select="cn.yix.blog.dao.mappers.AccountMapper.getAccountById"/>
        <collection property="tags" ofType="string" select="getArticleTags" column="id"/>
    </resultMap>

    <resultMap id="tagcount" type="TagCount">
        <id column="tag" property="tag"/>
        <result column="count" property="count"/>
    </resultMap>

    <sql id="listcolumns">a.id,a.title,a.addtime,a.edittime,a.author,a.topflag</sql>

    <select id="getArticleTags" resultType="string" parameterType="int">
        select tag from blog_tags where article=#{id}
    </select>

    <select id="getUserTags" resultType="string" parameterType="int">
        select t.tag from blog_tags t left join blog_articles a on a.id=t.article where a.author=#{userId} group by
        t.tag order by count(t.tag) desc limit 10
    </select>

    <select id="listNewArticles" resultMap="article" parameterType="map">
        select
        <include refid="listcolumns"/>,count(distinct c.id) replycount
        from blog_articles a
        left join blog_comments c on c.article=a.id
        left join blog_tags t on t.article=a.id
        <where>
            <if test="keywords!=null and keywords.length>0">
                <foreach collection="keywords" item="item" separator=" or " open="(" close=")">
                    a.title like #{item,jdbcType=VARCHAR}
                </foreach>
            </if>
            <if test="userid>0">and a.author=#{userid}</if>
            <if test="tag!=null">and t.tag=#{tag}</if>
            <if test="addtimeBegin>0">and a.addtime &gt; #{addtimeBegin}</if>
            <if test="addtimeEnd>0">and a.addtime &lt; #{addtimeEnd}</if>
        </where>
        group by a.id
        order by a.addtime desc
    </select>

    <select id="listHotArticles" resultMap="article" parameterType="map">
        select
        <include refid="listcolumns"/>,count(distinct c.id) replycount
        from blog_articles a
        left join blog_comments c on c.article=a.id
        left join blog_tags t on t.article=a.id
        <where>
            <if test="keywords!=null and keywords.length>0">
                <foreach collection="keywords" item="item" separator=" or " open="(" close=")" index="i">
                    a.title like #{item,jdbcType=VARCHAR}
                </foreach>
            </if>
            <if test="userid>0">and a.author=#{userid}</if>
            <if test="tag!=null">and t.tag=#{tag}</if>
            <if test="addtimeBegin>0">and a.addtime &gt; #{addtimeBegin}</if>
            <if test="addtimeEnd>0">and a.addtime &lt; #{addtimeEnd}</if>
        </where>
        group by a.id
        order by replycount desc
    </select>

    <select id="countArticles" resultType="int" parameterType="map">
        select count(*) from (select * from blog_articles a
        left join blog_tags t on t.article=a.id
        <where>
            <if test="keywords!=null and keywords.length>0">
                <foreach collection="keywords" item="item" separator=" or " open="(" close=")">
                    a.title like #{item}
                </foreach>
            </if>
            <if test="userid>0">and a.author=#{userid}</if>
            <if test="tag!=null">and t.tag=#{tag}</if>
            <if test="addtimeBegin>0">and a.addtime &gt; #{addtimeBegin}</if>
            <if test="addtimeEnd>0">and a.addtime &lt; #{addtimeEnd}</if>
        </where>
        group by a.id)s
    </select>

    <select id="listArticlesByAccount" parameterType="int" resultMap="article">
        select
        <include refid="listcolumns"/>
        from blog_articles a where a.author=#{accountId}
    </select>

    <select id="countArticlesByAccount" parameterType="int" resultType="int">
        select count(*) from blog_articles where author=#{accountId}
    </select>

    <select id="listArticlesByTag" parameterType="String" resultMap="article">
        select
        <include refid="listcolumns"/>
        from blog_articles a
        left join blog_tags t on t.article=a.id
        where t.tag=#{tag} group by a.id
    </select>

    <select id="countArticlesByTag" parameterType="String" resultType="int">
        select count(a.id) from blog_articles a
        left join blog_tags t on t.article=a.id
        where t.tag=#{tag} group by a.id
    </select>

    <select id="getArticle" parameterType="int" resultMap="article">
        select * from blog_articles where id=#{id}
    </select>

    <select id="listTags" resultMap="tagcount" parameterType="int">
        select tag,count(article) count from blog_tags group by tag order by count(article) desc limit #{number}
    </select>

    <insert id="saveArticle" parameterType="Article" useGeneratedKeys="true" keyProperty="id">
        insert into blog_articles (title,content,addtime,edittime,author,topflag) values
        (#{title},#{content},#{addTime},#{editTime,jdbcType=BIGINT},#{author.id},#{topFlag})
    </insert>

    <insert id="saveTag" parameterType="Article">
        insert into blog_tags (article,tag) values
        <foreach collection="tags" separator="," item="tag">
            (#{id},#{tag})
        </foreach>
    </insert>

    <update id="update" parameterType="Article">
        update blog_articles
        set
        title=#{title},
        content=#{content},
        edittime=#{editTime},
        topflag=#{topFlag}
        where id=#{id}
    </update>

    <delete id="delete" parameterType="Article">
        delete from blog_articles where id=#{id}
    </delete>

    <delete id="clearArticleTags" parameterType="Article">
        delete from blog_tags where article=#{id}
    </delete>
</mapper>